#!/usr/bin/env php
<?php

// Autoload dependencies
require __DIR__ . '/../vendor/autoload.php';  // Use Composer autoloader

// Ensure CLI execution
if (php_sapi_name() !== 'cli') {
    exit('This script must be run from the command line.' . PHP_EOL);
}

// Check PHP version
if (version_compare(PHP_VERSION, '7.4.0', '<')) {
    exit('PHP >=7.4 is required. Current version: ' . PHP_VERSION . PHP_EOL);
}

// Get command from arguments
$command = $argv[1] ?? 'help';

// Handle commands
switch ($command) {
    case 'init':
        initCommand($argv);
        break;
    case '-v':
    case 'version':
        echo "MyFramework CLI v1.0.2" . PHP_EOL;
        exit(0);
    case 'manage.php':
        $manageFile = getcwd() . DIRECTORY_SEPARATOR . 'manage.php';
        if (!file_exists($manageFile)) {
            echo "Error: manage.php not found in current directory." . PHP_EOL;
            exit(1);
        }
        $args = array_slice($argv, 2);
        $cmd = '"' . PHP_BINARY . '" "' . $manageFile . '" ' . implode(' ', array_map('escapeshellarg', $args));
        passthru($cmd, $exitCode);
        exit($exitCode);
    case 'create':
    case 'status':
    case 'generate:routes':
    case 'generate:model':
    case 'migrate':
        $manageFile = getcwd() . DIRECTORY_SEPARATOR . 'manage.php';
        if (!file_exists($manageFile)) {
            echo "Error: manage.php not found in current directory." . PHP_EOL;
            exit(1);
        }
        $args = array_slice($argv, 1);
        $cmd = '"' . PHP_BINARY . '" "' . $manageFile . '" ' . implode(' ', array_map('escapeshellarg', $args));
        passthru($cmd, $exitCode);
        exit($exitCode);
    case '-h':
    case 'help':
    default:
        echo "Reut CLI Tool v1.0.2" . PHP_EOL;
        echo "Usage: php manage.php <command>" . PHP_EOL;
        echo "Commands:" . PHP_EOL;
        echo "  create            - Initial start of project or add tables from models to the database" . PHP_EOL;
        echo "  status            - Check for pending migrations in the models" . PHP_EOL;
        echo "  generate:routes   - Generate routes for each model into the route/ folder" . PHP_EOL;
        echo "  generate:model    - Generate model class, pass the model name into the console" . PHP_EOL;
        echo "  migrate           - Apply migrations to the table from changes in the model definition" . PHP_EOL;
        echo "  -v, version       - Show CLI version" . PHP_EOL;
        echo "  -h, help          - Show this help message" . PHP_EOL;
        echo "Requirements: PHP (>=7.4) and Composer must be installed." . PHP_EOL;
        break;
}

function initCommand(array $argv): void
{
    echo 'Initializing a new project...' . PHP_EOL;

    // Interactive prompts
    $projectName = prompt('Enter project name (default: myproject): ') ?: 'myproject';
    $dbType = prompt('Enter database type (mysql or postgresql, default: mysql): ') ?: 'mysql';
    if (!in_array($dbType, ['mysql', 'postgresql'])) {
        echo "Error: Invalid database type. Must be 'mysql' or 'postgresql'." . PHP_EOL;
        exit(1);
    }
    $dbName = prompt('Enter database name (default: test_db): ') ?: 'test_db';
    $dbUsername = prompt('Enter database username (default: root): ') ?: 'root';
    $dbPassword = prompt('Enter database password (leave blank if none): ');
    $secretKey = prompt('Enter secret key (default: 12345678): ') ?: '12345678';

    // Create project directory
    $projectDir = getcwd() . DIRECTORY_SEPARATOR . $projectName;
    if (is_dir($projectDir)) {
        echo "Error: Directory already exists: $projectDir" . PHP_EOL;
        exit(1);
    }
    mkdir($projectDir, 0755, true);
    echo "Created project directory: $projectDir" . PHP_EOL;

    // Change to project directory
    chdir($projectDir);

    // Create subdirectories
    $dirs = ['config/db', 'models', 'routers'];
    foreach ($dirs as $dir) {
        mkdir($dir, 0755, true);
        echo "Created directory: $dir" . PHP_EOL;
    }

    // Copy config/ directory from templates
    $templateConfigDir = __DIR__ . '/../templates/config';
    $destConfigDir = 'config';
    if (is_dir($templateConfigDir)) {
        recursiveCopy($templateConfigDir, $destConfigDir);
        echo "Copied config/ directory" . PHP_EOL;
    } else {
        echo "Warning: templates/config/ not found. Skipping." . PHP_EOL;
    }

    // Generate .env file
    $envContent = <<<ENV
SECRET_KEY=$secretKey
DB_USERNAME=$dbUsername
DB_PASSWORD=$dbPassword
DB_NAME=$dbName
DB_TYPE=$dbType
ENV;
    file_put_contents('.env', $envContent);
    echo 'Created .env file' . PHP_EOL;

    // Generate config.php
    $configContent = file_exists(__DIR__ . '/../src/configContent.php')
        ? require __DIR__ . '/../src/configContent.php'
        : '<?php return [];';  // Fallback if missing
    file_put_contents('config.php', $configContent);
    echo 'Created config.php' . PHP_EOL;

    // Generate index.php
    $indexContent = file_exists(__DIR__ . '/../src/indexContent.php')
        ? require __DIR__ . '/../src/indexContent.php'
        : '<?php echo "Hello from MyFramework!";';  // Fallback
    file_put_contents('index.php', $indexContent);
    echo 'Created index.php' . PHP_EOL;

    // Generate manage.php
    $manageContent = <<<PHP
<?php
require __DIR__ . '/vendor/autoload.php';
use Reut\DB\Creator\DatabaseCreator;
\$newDB = new DatabaseCreator();
\$newDB->Generate();
PHP;
    file_put_contents('manage.php', $manageContent);
    echo 'Created manage.php' . PHP_EOL;

    // Copy composer.json
    $templateComposer = __DIR__ . '/../templates/composer.json';
    if (file_exists($templateComposer)) {
        copy($templateComposer, 'composer.json');
        echo "Copied composer.json" . PHP_EOL;
    } else {
        echo "Warning: templates/composer.json not found. Creating basic composer.json." . PHP_EOL;
        $basicComposer = json_encode([
            'name' => "myframework/$projectName",
            'require' => ['php' => '>=7.4'],
            'autoload' => ['psr-4' => ["MyFramework\\" => "src/"]]
        ], JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
        file_put_contents('composer.json', $basicComposer);
    }

    echo PHP_EOL . 'Project initialized successfully!' . PHP_EOL;
    echo 'Next steps:' . PHP_EOL;
    echo '- Run `composer install` in the project directory.' . PHP_EOL;
    echo '- Use `php manage.php generate:model Users` to create models.' . PHP_EOL;
    echo '- Or use `Reut manage.php generate:model Users` globally.' . PHP_EOL;
}

function prompt(string $message): string
{
    echo $message;
    return trim(fgets(STDIN));
}

function recursiveCopy(string $source, string $dest): void
{
    if (!is_dir($dest)) {
        mkdir($dest, 0755, true);
    }
    $dir = opendir($source);
    while (($file = readdir($dir)) !== false) {
        if ($file === '.' || $file === '..') {
            continue;
        }
        $srcPath = $source . DIRECTORY_SEPARATOR . $file;
        $destPath = $dest . DIRECTORY_SEPARATOR . $file;
        if (is_dir($srcPath)) {
            recursiveCopy($srcPath, $destPath);
        } else {
            copy($srcPath, $destPath);
        }
    }
    closedir($dir);
}